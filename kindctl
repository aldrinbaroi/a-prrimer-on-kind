#!/bin/bash
 
#
# Bash command exection library with error logging
#
# Dependency: bash-lib-logging
#


__initExeCmdLibrary()
{
	(( ${__EXECMD_LIB_INITIALIZED__} )) && return
	readonly __EXECMD_LIB_INITIALIZED__=1
}

exeCmd()
{

        local cmd=$1
        local errorMsg=$2
        local successMsg=$3 
        set -e
        set -o pipefail 
        if [ -z "${cmd}" ]; then
                abort "(exeCmd): command not provided"
        else
                if [ -z "${errorMsg}" ]; then
                        errorMsg="Error: Command execution failed. Command: [${cmd//\"/\\\"}]"
                else
                        errorMsg="${errorMsg//\"/\\\"}"
                fi
                if [ -z "${successMsg}" ]; then
                        successMsg=""
                else
                        successMsg="${successMsg//\"/\\\"}"
                fi
                local _CMD="${cmd}; 
                                if (( \$? )); then 
                                        echo \"${errorMsg}\";
                                        echo 'Aborting...';
                                        exit 1;
                                else
                                        if [ ! -z \"${successMsg}\" ]; then
                                                echo \"${successMsg}\";
                                        fi;
                                fi"
                bash -c "${_CMD}" 2>&1 | logPipe
        fi
        set +o pipefail 
        set +e
}

exeCmd_asUser()
{
        local user=${1}
        local cmd=${2}
        local errorMsg=${3}
        local successMsg=${4}
        if [ -z "${user}" ]; then
                abort "(exeCmd_asUser): user name not provided"
        fi
        if [ -z "${cmd}" ]; then
                abort "(exeCmd_asUser): command not provided"
        else
                local _CMD="runuser -l ${user} -c '${cmd}'"
                exeCmd "${_CMD}" "${errorMsg}" "${successMsg}"
        fi
}

#
# NOTE: Called function must return
#       >= 1 to indicate success or 
#          0 to indicate failure
#       Otherwise this function will fail
#
exeFunc()
{
        local func=$1
        local errorMsg=$2
        local successMsg=$3
        if [ -z "${func}" ]; then
                abort "(exeFunc): Function name not provided"
        fi
        if (( $(${func}) )); then
                if [ ! -z "${successMsg}" ]; then
                        log "${successMsg}"
                fi
        else
                if [ -z "${errorMsg}" ]; then
			abort "ERROR: Failed to execute function: ${func}"
		else
                        abort "${errorMsg}"
                fi
        fi
} 

isFunction()
{
	local func=$1
	if [ -z "${func}" ]; then
		abort "Function name not provided"
	fi
	if (( $(LC_ALL=C type -t ${func}) )); then
		echo 0
	else
		echo 1
	fi
} 

__initExeCmdLibrary

#
# Bash logging library
#

__initLoggingLibrary()
{
	(( ${__LOGGING_LIB_INITIALIZED__} )) && return
	readonly __LOGGING_LIB_INITIALIZED__=1

	readonly DEFAULT_LOG_DIR="${pwd}"
	readonly DEFAULT_LOG_FILE_NAME="app.log"
	readonly DEFAULT_LOG_TAG="APP-LOG"

	LOG_DIR="${DEFAULT_LOG_DIR}"
	LOG_FILE_NAME="${DEFAULT_LOG_FILE_NAME}"
	LOG_FILE="${LOG_DIR}/${LOG_FILE_NAME}"
	LOG_TAG="${DEFAULT_LOG_TAG}"

	LOGGING_ENABLED=0
	LOGGING_BACKUP=0
}

setLogDirectory()
{
	LOG_DIR=${1:-${LOG_DIR}}
	LOG_FILE="${LOG_DIR}/${LOG_FILE_NAME}"
}

setLogFileName()
{
	LOG_FILE_NAME=${1:-${LOG_FILE_NAME}}
	LOG_FILE="${LOG_DIR}/${LOG_FILE_NAME}"
}

setLogTag()
{
	LOG_TAG=$1
}

enableLogging()
{
	LOGGING_ENABLED=1
}

disableLogging()
{
	LOGGING_ENABLED=0
}

enableLogBackup()
{
	LOGGING_BACKUP=1
}

disableLogBackup()
{
	LOGGING_BACKUP=0 
}

newLogFile()
{
	if [ -f "${LOG_FILE}" ]; then
		if (( ${LOGGING_ENABLED} )) && (( ${LOGGING_BACKUP} )); then
			local backupLogFile="${LOG_FILE}-$(ls --full-time ${LOG_FILE} | awk '{ print $6"_"$7 }' | sed 's/[.].*$//')"
			if (( $(cp ${LOG_FILE} ${backupLogFile} 2>&1; echo $?) )); then
				echo "WARN: Failed to create backup of the previous log file"
			fi
		fi
	fi
	if (( $(cat /dev/null > ${LOG_FILE} 2>&1; echo $?) )); then
		echo "Failed to create/clear the log file [${LOG_FILE}]"
		echo "Exiting..."
		exit 1
	fi
}

log()
{
	if (( LOGGING_ENABLED )); then
		echo -e "${1}" | tee -a ${LOG_FILE}
	else
		echo -e "${1}"
	fi
}

logPipe()
{
	while read message; do
		log "${message}"
	done
}

abort()
{
	local msg=${1}
	local exitCode=${2:-1}
	log "${1}"
	log "Aborting..."
	exit ${exitCode}
}

__initLoggingLibrary

#
# Misc bash utility functions
#
# Dependency: bash-lib-logging
#


__initMiscLibrary()
{
	(( ${__MISC_LIB_INITIALIZED__} )) && return
	readonly __MISC_LIB_INITIALIZED__=1 
}

push_dir() 
{
	local directoryName=${1}
	if [ -z "${directoryName}" ]; then
		abort "Direcotry name not provide."
	fi
	if [ ! -d "${directoryName}" ]; then
		abort "Direcotry doesn't exist."
	fi
	pushd ${directoryName} > /dev/null 2>&1
	if (( $? )); then
		abort "Failed to push directory [${directoryName}] on to stack."
	fi
}

pop_dir()
{
	popd > /dev/null 2>&1
	if (( $? )); then
		abort "Possible coding error."
	fi
}



createDirectory()
{
	local directoryName=${1}
	if [ -z "${directoryName}" ]; then
		abort "Direcotry name not provide."
	fi
	if [ ! -d "${directoryName}" ]; then
		mkdir -p ${directoryName}
		if (( $? )); then
			abort "Failed to create directory [${directoryName}]"
		fi
	fi
}

clearDirectory()
{
	local directoryName=${1}
	if [ -z "${directoryName}" ]; then
		abort "Direcotry name not provide."
	fi
	if [ ! -d "${directoryName}" ]; then
		abort "Direcotry doesn't exist."
	fi
	if [ -d "${directoryName}" ]; then
		if (( $(ls -A ${WRK_DIR} | wc -l) > 0 )); then
			log "Work directory is not empty.  Clearing it..."
			push_dir ${directoryName} 
			rm -rf ./*
			local error=${?}
			pop_dir 
			if (( ${error} )); then
				abort "Failed to clear directory [${directoryName}]"
			fi
		fi	
	else
		createDirectory ${directoryName}
	fi	
}

#
# NOTE: doesn't work right...
#
getFullPath()
{
	local file=${1}
	local fullPath=""
	if [ -z "${file}" ]; then
		abort "Fire/directory name not provide."
	fi	
	if [ -d "${file}" ]; then
		pushd "${file}" > /dev/null
		fullPath=$(pwd)
		popd
	elif [ -f "${file}" ]; then
		pushd "$(dirname ${file})" > /dev/null
		fullPath="$(pwd)/$(basename ${file})"
		popd
	else
		abort "File/directory [${file}] doesn't exist."
	fi
	echo "${fullPath}"
}

#
# Get host's IP address
#
getHostIP()
{
	case "$OSTYPE" in
		linux-gnu) ip route get 8.8.8.8  | awk '{print $7}' ;;
		darwin*) ipconfig getifaddr $(route get 8.8.8.8 | awk '/interface: / {print $2; }') ;;
		*) echo "Unsupported OS: $OSTYPE.  Unable to get host IP address" ;;
	esac
}

__initMiscLibrary

#
# 
# 

isClusterExist() {
	local clusterName=${1}
	local clustersList=($(kind get clusters 2> /dev/null))
	local clustersCount=${#clustersList[@]}
	if (( $clustersCount > 0 )) && [[ " ${clustersList[@]} " =~ " ${clusterName} " ]]; then
		exit 0
	else
		exit 1
	fi 
}

clusterHelp() {
	echo ""
	echo "Usage: "
	echo "  create-cluster [-c config-YAML-file] [-n cluster-name]"
	echo ""
	echo "  If no options are provided then default kind cluster is created"
	echo ""
}

#
# Create Kubernetes cluster using "kind" 
#

createCluster() {
	echo "\$@ = $@"
	local configFile=""
	local clusterName="" 

	echo ""
	while getopts "c:n:h" opt ${@}; do
		case ${opt} in
			c) configFile=${OPTARG} ;; 
			n) clusterName=${OPTARG} ;; 
			h) clusterHelp && exit 0 ;;
		esac
	done

	if [[ ! -z "${configFile}" && ! -f ${configFile} ]]; then 
		abort "Config file [${configFile}] doesn't exist. aborting..."; 
	fi
	readonly CONFIG_FILE=${configFile}
	readonly CLUSTER_NAME=${clusterName:-kind}
	readonly CTX_NAME="kind-${clusterName:-kind}" 
	echo ""
	echo "Creating cluster..."
	echo ""
	echo "  Cluster name      : ${CLUSTER_NAME}"
	echo "  Cluster context   : ${CTX_NAME}"
	echo "  Configuration file: ${CONFIG_FILE}"
	echo "" 
	if ( isClusterExist ${CLUSTER_NAME} ); then
		abort "Cannot create.  [${CLUSTER_NAME}] cluster exists."
	fi
	if [[ -z "${CONFIG_FILE}" ]]; then
		kind create cluster --name=${CLUSTER_NAME}
	else
		kind create cluster --config=${CONFIG_FILE} --name=${CLUSTER_NAME}
	fi
	if (( $? )); then echo "Failed to create cluster"; echo ""; exit 1; fi
	echo "Successfuly created cluster"
	echo ""
}

#
# Delete Kubernetes cluster created using "kind"
#

deleteCluster() {
	echo ""
	while getopts "n:h" opt ${@}; do
		case ${opt} in
			n) clusterName=${OPTARG} ;;
			h)
				echo "Usage: "
				echo "        deleteCluster [-n cluster-name]"
				echo ""
				echo "        If cluster name is not provided then default kind cluster is deleted"
				echo ""
				exit 0
				;;
		esac
	done

	readonly CLUSTER_NAME=${clusterName:-kind}

	echo "Deleting [${CLUSTER_NAME}] cluster..."
	if ( isClusterExist ${CLUSTER_NAME} ); then
		read -p "Are you sure you want to delete [${CLUSTER_NAME}] cluster? [Y/N] " -n1 userResponse
		echo ""
		if [[ "${userResponse,,}" == "y" ]]; then
			kind delete cluster --name=${CLUSTER_NAME} 
			if (( $? )); then 
				echo "Failed to delete cluster"
			else 
				echo "Deleted the cluster"
			fi
		else
			echo "Not deleting the cluster."
		fi
	else
		echo "[${CLUSTER_NAME}] cluster doesn't exist."
	fi 
	echo ""
}

#
# Setup dashboard & generate dashboard login "kubeconfig" file
# 

downloadDashboardSetupYAMLFile() {
	source config/dashboard.conf 
	curl -o config/dashboard-${DASHBOARD_RELEASE_TAG}.yaml ${DASHBOARD_SETUP_YAML_URL} 
	(( $? )) && abort "Failed to download dashboard setup YAML file"
}

isDashboardAppRunning() {
	appStatus=$(kubectl get pods -n kubernetes-dashboard -o=jsonpath="{range .items[?(@.metadata.labels.k8s-app=='kubernetes-dashboard')]}{range .status.containerStatuses[?(@.name=='kubernetes-dashboard')]}{.state}{'\n'}{end}" | jq 'keys'[0])
	[[ -z ${appStatus// /} || $appStatus != "\"running\"" ]] && echo 0 && return 0
        serviceTargetPort=$(kubectl get service kubernetes-dashboard -n kubernetes-dashboard -o jsonpath="{.spec.ports[0].targetPort}")
	[[ -z ${serviceTargetPort// /} ]] && echo 0 && return 0
	endPointPort=$(kubectl get endpoints -n kubernetes-dashboard -o jsonpath="{range .items[?(@.metadata.name=='kubernetes-dashboard')]}{.subsets[0].ports[0].port}")
	[[ -z ${endPointPort// /} ]] && echo 0 && return 0
	(( $serviceTargetPort == $endPointPort )) && echo 1 || echo 0
}

isServiceAccountExist() {
	local svcAccount=$(kubectl get serviceaccount -o jsonpath="{range .items[?(@.metadata.name=='dashboard-admin')]}{@.metadata.name}")
	[[ -z ${svcAccount// /} || ${svcAccount} != "dashboard-admin" ]] && echo "0" || echo "1"
}

isClusterRoleBindingExist() {
	local accountName=$(kubectl get clusterrolebinding -o json | jq  '.items[] | select(.roleRef.kind == "ClusterRole" and .roleRef.name == "cluster-admin") | select (.subjects[] | .kind  == "ServiceAccount") | .subjects[0].name')
	[[ -z ${accountName// /} || ${accountName} != "\"dashboard-admin\"" ]] && echo "0" || echo "1" 
}

findUnusedPort() {
	local used_ports=( $(netstat -ant4 | awk '(NR>2) {print $4"\n"$5}' | sed -e '/0[.]0[.]0[.]0/d' | sed -r 's/.*:([[:digit:]]+).*/\1/') )
	while : ; do
		unused_port=$((1024 + RANDOM))
		[[ ! " ${used_ports[*]} " =~ " ${unused_port} " ]] && break
	done
	echo $unused_port
}

killExistingExposedPort() {
	local dashboardFile=${1// /}
	[[ -z ${dashboardFile} || ! -f ${dashboardFile} ]] && return 0
	existingExposedPort=$(cat ${dashboardFile} | grep $(getHostIP) | sed -r 's/.*:([[:digit:]]+).*/\1/')
	if [[ -z ${existingExposedPort} ]]; then
		existingExposedPort=$(cat ${dashboardFile} | grep "127.0.0.1" | sed -r 's/.*:([[:digit:]]+).*/\1/')
		[[ -z ${existingExposedPort} ]] && return 0
	fi
	existingProcessId=$(netstat -antp 2> /dev/null | awk '/'"$existingExposedPort"'/ && /kubectl/ {print $7}' | uniq | sed -r 's/([[:digit:]]+).*/\1/')
	[[ -z ${existingProcessId// /} ]] && return 0
	kill -9 ${existingProcessId}
	(( $? )) && abort "Failed to kill existing dashboard exposed port" 
}

dashboardHelp() {
	echo ""
	echo "Usage: "
	echo "  kindctl dashboard setup [-n cluster-name] [-p dashboard-port]"
	echo "  kindctl dashboard remove [-n cluster-name]"
	echo "  kindctl dashboard help"
	echo ""
	echo "  If no options are provided then dashboard is setup in default [kind] cluster"
	echo "  with service account [dashboard-admin]"
	echo ""
}

setupDashboard() {
	source config/dashboard.conf 
	local svcAccount=""
	local clusterName="" 
	echo ""
	while getopts "n:p:h" opt ${@}; do
		case ${opt} in
			n) clusterName=${OPTARG} ;; 
			p) dashboardPort=${OPTARG} ;; 
			h) dashboardHelp && exit 0 ;;
			*) echo "Invalid option ${opt}" && exit 1;; 
		esac
	done
	dashboardPort=${dashboardPort:-0}
	(( $dashboardPort == 0 )) && dashboardPort=$(findUnusedPort)
	readonly HOST_IP=$(getHostIP) 
	readonly SVC_ACCOUNT="dashboard-admin"
	readonly CLUSTER_NAME=${clusterName:-kind}
	readonly CTX_NAME="kind-${clusterName:-kind}"
	readonly KUBECONFIG_FILE="${DATA_DIR}/${CTX_NAME}.kubeconfig" 
	readonly DASHBOARD_INFO="$DATA_DIR/${CTX_NAME}.dashboard.info"
	readonly DASHBOARD_FILE="${DATA_DIR}/${CTX_NAME}.dashboard.status"
	readonly DASHBOARD_PORT="${dashboardPort}"

	# Set up dashboard 
	echo ""
	echo "Setting up dashboard..." 
	echo ""
	echo "  Cluster name             : ${CLUSTER_NAME}"
	echo "  Cluster context          : ${CTX_NAME}"
	echo "  Dashboard service account: ${SVC_ACCOUNT}"
	echo "  Kube config file         : ${KUBECONFIG_FILE}" 
	echo "  Dashboard info file      : ${DASHBOARD_INFO}"
	echo "  Dashboard status file    : ${DASHBOARD_FILE}"
	echo "  Dashboard port           : ${DASHBOARD_PORT}"
	echo "" 
	if ( ! $(createDirectory ${DATA_DIR}) ); then
		abort "Failed to create kubeconfig directory [${DATA_DIR}] to store kubeconfig files"
	fi 
	if ( ! $(isClusterExist ${CLUSTER_NAME}) ); then
		abort "Cannot setup dashboard. [${CLUSTER_NAME}] cluster is not setup."
	fi
	kubectl config use-context ${CTX_NAME} 
	(( $? )) && abort  "Failed to set context"
	kubectl apply -f ${DASHBOARD_SETUP_YAML_URL} 
	(( $? )) && abort  "Failed to setup dashboard"
	sleep 3
	# Create service account in default namespace with cluster admin role (for ease of use)
	echo "Creating service account [${SVC_ACCOUNT}] in default namespace with cluster admin role..."
	if (( $(isServiceAccountExist) )); then
		echo "Service account exist."
	else
		kubectl create serviceaccount ${SVC_ACCOUNT} -n default 
		(( $? )) && abort "Failed to create service account"
		sleep 2
		# Create cluster admin role binging in default namespace
		echo "Creating cluster admin role binding..."
		if (( $(isClusterRoleBindingExist) )); then
			echo "Cluster role binding exist."
		else
			kubectl create clusterrolebinding dashboard-admin \
				-n default \
				--clusterrole=cluster-admin \
				--serviceaccount=default:${SVC_ACCOUNT}
			(( $? )) && abort "Failed to assigne cluster role to service account [${SVC_ACCOUNT}]"
		fi
		sleep 2
	fi
	# Generate dashboard login "kubeconfig" file
	echo "Generating dashboard login kubeconfig file: ${KUBECONFIG_FILE} ..."
	SVC_ACCOUNT_SECRET_NAME=$(kubectl get serviceaccount ${SVC_ACCOUNT} -n default -o jsonpath='{.secrets[0].name}')
	(( $? )) && abort "Failed to get service account secret key name"
	CA=$(kubectl get secret ${SVC_ACCOUNT_SECRET_NAME} -n default -o jsonpath='{.data.ca\.crt}')
	(( $? )) && abort "Failed to get service account certificate authority"
	TOKEN=$(kubectl get secret ${SVC_ACCOUNT_SECRET_NAME} -n default -o jsonpath='{.data.token}' | base64 --decode)
	(( $? )) && abort "Failed to get service account secret token"

	cat <<-EOF > ${KUBECONFIG_FILE}
		apiVersion: v1
		kind: Config
		clusters:
		  - name: ${CLUSTER_NAME}
		    cluster:
		      certificate-authority-data: ${CA}
		contexts:
		  - name: ${CTX_NAME}
		    context:
		      cluster: ${CLUSTER_NAME}
		      namespace: default
		      user: ${SVC_ACCOUNT}
		current-context: ${CTX_NAME}
		users:
		  - name: ${SVC_ACCOUNT}
		    user:
		      token: ${TOKEN}
		EOF

	(( $? )) && abort "Failed to create kubeconfig file: ${KUBECONFIG_FILE}"
	echo "Setting up remote access to dashboard..."
	while : ; do
		sleep 1
		(( $(isDashboardAppRunning) )) && break
	done
	killExistingExposedPort "${DASHBOARD_FILE}"
	nohup kubectl port-forward \
		--address=localhost,$(getHostIP) \
		-n kubernetes-dashboard \
		service/kubernetes-dashboard \
		$DASHBOARD_PORT:443 > ${DASHBOARD_FILE} 2>&1  &
	(( $? )) && abort "Failed to setup remote access to dashboard"

	cat <<- EOF > ${DASHBOARD_INFO}
	Cluster name             : ${CLUSTER_NAME}"
	Cluster context          : ${CTX_NAME}"
	Dashboard service account: ${SVC_ACCOUNT}"
	Kube config file         : ${KUBECONFIG_FILE}" 
	Dashboard port           : ${DASHBOARD_PORT}"
	Dashboard status file    : ${DASHBOARD_FILE}"
	EOF

	echo "Succesfully setup kubernetes dashboard"
	echo ""
	echo "Dashboard URL: https://[$HOST_IP | localhost]:$DASHBOARD_PORT"
	echo ""
	echo "Dashboard login token: "
	echo "$TOKEN"
	echo ""
}

removeDashboard() { 
	source config/dashboard.conf 
	local svcAccount=""
	local clusterName="" 
	echo ""
	while getopts "n:h" opt ${@}; do
		case ${opt} in
			n) clusterName=${OPTARG} ;; 
			h) dashboardHelp && exit 0 ;;
			*) echo "Invalid option ${opt}" && exit 1;; 
		esac
	done
	readonly SVC_ACCOUNT="dashboard-admin"
	readonly CLUSTER_NAME=${clusterName:-kind}
	readonly CTX_NAME="kind-${clusterName:-kind}"
	readonly KUBECONFIG_FILE="${DATA_DIR}/${CTX_NAME}.kubeconfig" 
	readonly DASHBOARD_INFO="$DATA_DIR/${CTX_NAME}.dashboard.info"
	readonly DASHBOARD_FILE="${DATA_DIR}/${CTX_NAME}.dashboard.status" 

	cat <<- EOF
	Removing dashboard..."
	
	  Cluster name             : ${CLUSTER_NAME}"
	  Cluster context          : ${CTX_NAME}"
	  Dashboard service account: ${SVC_ACCOUNT}"
	  Kube config file         : ${KUBECONFIG_FILE}" 
	  Dashboard info file      : ${DASHBOARD_INFO}"
	  Dashboard status file    : ${DASHBOARD_FILE}"
	 
	EOF
	if (( $(isDashboardAppRunning) )); then
		killExistingExposedPort
		kubectl delete -f ${DASHBOARD_SETUP_YAML_URL}
		(( $? )) && abort  "Failed to remove dashboard"
		echo "Successfully removed dashboard deployment"
		echo "Removing cluster role binding..."
		kubectl delete clusterrolebinding dashboard-admin 
		if (( $? )); then
			echo "Failed to remove cluster role binding"
		else
			echo "Successfully remove cluster role binding"
		fi
		echo "Removing service account..."
		kubectl delete serviceaccount ${SVC_ACCOUNT} -n default 
		(( $? )) && abort "Failed to remove service account [${SVC_ACCOUNT}]"
		echo "Successfully removed service account [${SVC_ACCOUNT}]"
	else
		echo "Dashboard is not running."
	fi
}

#
# Start proxy
# 

proxyHelp() {
	echo ""
	echo "Usage: "
	echo "  start-proxy [-n cluster-name] [-p proxy-port]"
	echo ""
	echo "  The default values are:"
	echo "  cluster-name  : kind"
	echo "  proxy-port    : RANDOM PORT"
	echo ""
}

startProxy() {
	source config/proxy.conf

	readonly TRUE=1
	readonly FALSE=0
	clusterName=""
	proxyPort=0
	openDashboardInBrowser=${FALSE}

	echo ""
	while getopts "n:p:oh" opt ${@}; do
		case ${opt} in
			n) clusterName=${OPTARG} ;;
			p) proxyPort=${OPTARG} ;;
			o) openDashboardInBrowser=${TRUE} ;;
			h) proxyHelp && exit 0 ;;
		esac
	done

	readonly CLUSTER_NAME="${clusterName:-kind}"
	readonly CTX_NAME="kind-${clusterName:-kind}"
	readonly PROXY_PORT_FILE="${DATA_DIR}/${CTX_NAME}"
	readonly PROXY_STATUS_FILE="${DATA_DIR}/${CTX_NAME}-status"

	echo "Starting proxy..."
	if ! ( isClusterExist ${CLUSTER_NAME} ); then 
        	abort "Cannot create proxy. [${CLUSTER_NAME}] cluster doesn't exists."
	fi 
	if [[ ! -d ${DATA_DIR} ]]; then
		mkdir -p ${DATA_DIR}
		(( $? )) && abort "Failed to create data directory [${DATA_DIR}] to store running proxy server's port number"
	fi 
	if [[ -f ${PROXY_PORT_FILE} ]]; then
		source ${PROXY_PORT_FILE}
		if [[ ! -z ${PROXY_PORT} ]] && (( ${PROXY_PORT} > 0 )); then
			readonly PS_COUNT=$(netstat -antp 2> /dev/null | grep kubectl | grep ${PROXY_PORT} | wc -l)
			(( ${PS_COUNT} > 0 )) && abort "Proxy already running..."
		fi
	fi
	PROXY_PORT="${proxyPort:-0}"
	echo "Setting current context to [${CTX_NAME}]..."
	kubectl config use-context ${CTX_NAME}
	kubectl proxy --port=${PROXY_PORT} > ${PROXY_STATUS_FILE} 2>&1 &
	sleep 5
	(( $? )) && abort "Failed to start proxy"
	PROXY_PORT=$(cat ${PROXY_STATUS_FILE} | grep -i "starting to serve on" | sed 's/.*://')
	DASHBOARD_URL="http://localhost:${PROXY_PORT}/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy"
	echo "PROXY_PORT=${PROXY_PORT}" > ${PROXY_PORT_FILE} 
	echo "Proxy started on port ${PROXY_PORT}"
	echo "You can access the Kubernetes dashboard at the following URL:"
	echo "${DASHBOARD_URL}"
	if [[ $openDashboardInBrowser == ${TRUE} ]]; then
		echo "Opening dashboard in the browser..."
		xdg-open ${DASHBOARD_URL}
		(( $? )) && echo "Failed to start proxy"
		echo "Opened the dashboard in the browser"
	fi
}

#
# Stop proxy
#

getProcessCount() {
	local _checkData=${1}
	if [ -z ${_checkData} ]; then
		echo 0
	else
		echo $(echo ${_checkData} | wc -l)
	fi
}

stopProxy() {
	source config/proxy.conf

	echo ""
	while getopts "n:h" opt ${@}; do
		case ${opt} in
			n) clusterName=${OPTARG} ;;
			h)
				echo "Usage: "
				echo "        stop-proxy [-n cluster-name]"
				echo ""
				echo "        The default cluster name is [kind]"
				echo ""
				exit 0
				;;
		esac
	done

	readonly CLUSTER_NAME=${clusterName:-kind}
	readonly CTX_NAME="kind-${clusterName:-kind}"
	readonly PROXY_PORT_FILE=${DATA_DIR}/${CTX_NAME}

	echo "Stopping proxy for [${CLUSTER_NAME}] cluster..."
	if [[ ! -f ${PROXY_PORT_FILE} ]]; then
		abort "Unable to locate proxy data file [${PROXY_PORT_FILE}] for [${CLUSTER_NAME}] cluster"
	fi
	source ${PROXY_PORT_FILE} 
	if [[ -z ${PROXY_PORT} ]] || (( ${PROXY_PORT} <= 0 )); then
		abort "Failed to get proxy port. Unable stop proxy."
	fi
	readonly checkData=$(netstat -antp 2> /dev/null | grep kubectl | grep ${PROXY_PORT})
	if (( $(getProcessCount ${checkData}) == 0 )); then 
		abort "Proxy not running..."; 
	fi 
	readonly processId=$(echo $checkData | awk '{print $7}' | awk 'BEGIN { FS = "/" } ; {print $1}')
	kill -9 ${processId} > /dev/null 2>&1
	(( $? )) && abort "Failed to stop proxy"
	echo "Successfully stopped proxy"
	echo ""
}

 
#
# 
#

category=$1
command=$2
shift 2

case $category in
	cluster)
		case $command in
			create) createCluster $@ ;;
			delete) deleteCluster $@ ;;
			help) clusterHelp ;;
		esac
		;;
	dashboard)
		case $command in
			setup) setupDashboard $@ ;;
			remove) removeDashboard $@ ;;
			help) dashboardHelp ;;
		esac
		;;
	proxy)
		case $command in
			start) startProxy ;;
			stop) stopProxy ;;
			help) proxyHelp ;;
		esac
		;; 
esac


 
#::END::

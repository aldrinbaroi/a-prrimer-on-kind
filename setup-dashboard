#!/bin/bash
#
# Setup dashboard & generate dashboard login "kubeconfig" file
# 

source utils.sh
source dashboard.config

svcAccount=""
clusterName=""

echo ""
while getopts "s:n:h" opt ${@}; do
	case ${opt} in
		s)
			svcAccount=${OPTARG}
			;; 
		n)
			clusterName=${OPTARG}
			;; 
		h)
			echo "Usage: "
                        echo "        setup-dashboard [-s service-account-name] [-n cluster-name]"
			echo ""
			echo "        If no options are provided then dashboard is setup in default [kind] cluster"
			echo "        with service account [dashboard-admin]"
			echo ""
			exit 0
			;; 
	esac
done

readonly SVC_ACCOUNT=${svcAccount:-dashboard-admin}
readonly CLUSTER_NAME=${clusterName:-kind}
readonly CTX_NAME="kind-${clusterName:-kind}"
readonly KUBECONFIG_FILE="${CTX_NAME}.kubeconfig" 

# Set up dashboard
echo ""
echo "Setting up dashboard..."
echo ""
echo "  Cluster name             : ${CLUSTER_NAME}"
echo "  Cluster context          : ${CTX_NAME}"
echo "  Dashboard service account: ${SVC_ACCOUNT}"
echo "  Kube config file         : ${KUBECONFIG_FILE}" 
echo "" 

if ( ! $(isClusterExist ${CLUSTER_NAME}) ); then
	abort "Cannot setup dashboard. [${CLUSTER_NAME}] cluster is not setup."
fi
kubectl config use-context ${CTX_NAME} 
kubectl apply -f ${DASHBOARD_SETUP_YAML_URL} 
if (( $? )); then abort  "Failed to setup dashboard"; fi
sleep 3

# Create service account in default namespace with cluster admin role (for ease of use)
echo "Creating service account [${SVC_ACCOUNT}] in default namespacewith cluster admin role..."
kubectl create serviceaccount ${SVC_ACCOUNT} -n default 
if (( $? )); then abort  "Failed to create service account"; fi
sleep 2
kubectl create clusterrolebinding dashboard-admin -n default --clusterrole=cluster-admin --serviceaccount=default:${SVC_ACCOUNT} 
if (( $? )); then abort  "Failed to assigne cluster role to service account [${SVC_ACCOUNT}]"; fi
sleep 2

# Generate dashboard login "kubeconfig" file
echo "Generating dashboard login kubeconfig file: ${KUBECONFIG_FILE} ..."
SVC_ACCOUNT_SECRET_NAME=$(kubectl get serviceaccount ${SVC_ACCOUNT} -n default -o jsonpath='{.secrets[0].name}')
if (( $? )); then abort  "Failed to get service account secret key name"; fi
CA=$(kubectl get secret ${SVC_ACCOUNT_SECRET_NAME} -n default -o jsonpath='{.data.ca\.crt}')
if (( $? )); then abort  "Failed to get service account certificate authority"; fi
TOKEN=$(kubectl get secret ${SVC_ACCOUNT_SECRET_NAME} -n default -o jsonpath='{.data.token}' | base64 --decode)
if (( $? )); then abort  "Failed to get service account secret token"; fi

cat <<-EOF > ${KUBECONFIG_FILE}
	apiVersion: v1
	kind: Config
	clusters:
	  - name: ${CTX_NAME}
	    cluster:
	      certificate-authority-data: ${CA}
	contexts:
	  - name: ${CTX_NAME}
	    context:
	      cluster: ${CTX_NAME}
	      namespace: default
	      user: ${CTX_NAME}
	current-context: ${CTX_NAME}
	users:
	  - name: ${CTX_NAME}
	    user:
	      token: ${TOKEN}
	EOF

if (( $? )); then abort  "Failed to create kubeconfig file: ${KUBECONFIG_FILE}"; fi
echo "Succesfully setup kubernetes dashbaord & created kubeconfig file: ${KUBECONFIG_FILE}"
echo ""

#::END:: 

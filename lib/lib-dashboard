#!/bin/bash
#
# Setup dashboard & generate dashboard login "kubeconfig" file
# 

downloadDashboardSetupYAMLFile() {
	source config/dashboard.conf 
	curl -o config/dashboard-${DASHBOARD_RELEASE_TAG}.yaml ${DASHBOARD_SETUP_YAML_URL} 
	(( $? )) && abort "Failed to download dashboard setup YAML file"
}

isDashboardAppRunning() {
	appStatus=$(kubectl get pods -n kubernetes-dashboard -o=jsonpath="{range .items[?(@.metadata.labels.k8s-app=='kubernetes-dashboard')]}{range .status.containerStatuses[?(@.name=='kubernetes-dashboard')]}{.state}{'\n'}{end}" | jq 'keys'[0])
	[[ -z ${appStatus// /} || $appStatus != "\"running\"" ]] && echo 0 && return 0
        serviceTargetPort=$(kubectl get service kubernetes-dashboard -n kubernetes-dashboard -o jsonpath="{.spec.ports[0].targetPort}")
	[[ -z ${serviceTargetPort// /} ]] && echo 0 && return 0
	endPointPort=$(kubectl get endpoints -n kubernetes-dashboard -o jsonpath="{range .items[?(@.metadata.name=='kubernetes-dashboard')]}{.subsets[0].ports[0].port}")
	[[ -z ${endPointPort// /} ]] && echo 0 && return 0
	(( $serviceTargetPort == $endPointPort )) && echo 1 || echo 0
}

isServiceAccountExist() {
	local svcAccount=$(kubectl get serviceaccount -o jsonpath="{range .items[?(@.metadata.name=='dashboard-admin')]}{@.metadata.name}")
	[[ -z ${svcAccount// /} || ${svcAccount} != "dashboard-admin" ]] && echo "0" || echo "1"
}

isClusterRoleBindingExist() {
	local accountName=$(kubectl get clusterrolebinding -o json | jq  '.items[] | select(.roleRef.kind == "ClusterRole" and .roleRef.name == "cluster-admin") | select (.subjects[] | .kind  == "ServiceAccount") | .subjects[0].name')
	[[ -z ${accountName// /} || ${accountName} != "\"dashboard-admin\"" ]] && echo "0" || echo "1" 
}

findUnusedPort() {
	local used_ports=( $(netstat -ant4 | awk '(NR>2) {print $4"\n"$5}' | sed -e '/0[.]0[.]0[.]0/d' | sed -r 's/.*:([[:digit:]]+).*/\1/') )
	while : ; do
		unused_port=$((1024 + RANDOM))
		[[ ! " ${used_ports[*]} " =~ " ${unused_port} " ]] && break
	done
	echo $unused_port
}

killExistingExposedPort() {
	local dashboardFile=${1// /}
	[[ -z ${dashboardFile} && -f ${dashboardFile} ]] && return 0
	existingExposedPort=$(cat ${dashboardFile} | grep $(getHostIP) | sed -r 's/.*:([[:digit:]]+).*/\1/')
	if [[ -z ${existingExposedPort} ]]; then
		existingExposedPort=$(cat ${dashboardFile} | grep "127.0.0.1" | sed -r 's/.*:([[:digit:]]+).*/\1/')
		[[ -z ${existingExposedPort} ]] && return 0
	fi
	existingProcessId=$(netstat -antp 2> /dev/null | awk '/'$existingExposedPort'/ && /kubectl/ {print $7}' | uniq | sed -r 's/([[:digit:]]+).*/\1/')
	[[ -z ${existingProcessId// /} ]] && return 0
	kill -9 ${existingProcessId}
	(( $? )) && abort "Failed to kill existing dashboard exposed port" 
}

dashboardHelp() {
	echo ""
	echo "Usage: "
	echo "  kindctl dashboard setup [-n cluster-name] [-s service-account-name] [-p dashboard-port]"
	echo "  kindctl dashboard remove [-n cluster-name]"
	echo "  kindctl dashboard help"
	echo ""
	echo "  If no options are provided then dashboard is setup in default [kind] cluster"
	echo "  with service account [dashboard-admin]"
	echo ""
}

setupDashboard() {
	source config/dashboard.conf 
	local svcAccount=""
	local clusterName="" 
	echo ""
	while getopts "n:s:p:h" opt ${@}; do
		case ${opt} in
			s) svcAccount=${OPTARG} ;; 
			n) clusterName=${OPTARG} ;; 
			p) dashboardPort=${OPTARG} ;; 
			h) dashboardHelp && exit 0 ;;
			*) echo "Invalid option ${opt}" && exit 1;; 
		esac
	done
	dashboardPort=${dashboardPort:-0}
	(( $dashboardPort == 0 )) && dashboardPort=$(findUnusedPort)
	readonly HOST_IP=$(getHostIP) 
	readonly SVC_ACCOUNT=${svcAccount:-dashboard-admin}
	readonly CLUSTER_NAME=${clusterName:-kind}
	readonly CTX_NAME="kind-${clusterName:-kind}"
	readonly KUBECONFIG_FILE="${DATA_DIR}/${CTX_NAME}.kubeconfig" 
	readonly DASHBOARD_PORT="${dashboardPort}"
	readonly DASHBOARD_FILE="${DATA_DIR}/${CTX_NAME}.dashboard"

	# Set up dashboard 
	echo ""
	echo "Setting up dashboard..." 
	echo ""
	echo "  Cluster name             : ${CLUSTER_NAME}"
	echo "  Cluster context          : ${CTX_NAME}"
	echo "  Dashboard service account: ${SVC_ACCOUNT}"
	echo "  Kube config file         : ${KUBECONFIG_FILE}" 
	echo "  Dashboard port           : ${DASHBOARD_PORT}"
	echo "  Dashboard status file    : ${DASHBOARD_FILE}"
	echo "" 
	if ( ! $(createDirectory ${DATA_DIR}) ); then
		abort "Failed to create kubeconfig directory [${DATA_DIR}] to store kubeconfig files"
	fi 
	if ( ! $(isClusterExist ${CLUSTER_NAME}) ); then
		abort "Cannot setup dashboard. [${CLUSTER_NAME}] cluster is not setup."
	fi
	kubectl config use-context ${CTX_NAME} 
	(( $? )) && abort  "Failed to set context"
	kubectl apply -f ${DASHBOARD_SETUP_YAML_URL} 
	(( $? )) && abort  "Failed to setup dashboard"
	sleep 3
	# Create service account in default namespace with cluster admin role (for ease of use)
	echo "Creating service account [${SVC_ACCOUNT}] in default namespace with cluster admin role..."
	if (( $(isServiceAccountExist) )); then
		echo "Service account exist."
	else
		kubectl create serviceaccount ${SVC_ACCOUNT} -n default 
		(( $? )) && abort "Failed to create service account"
		sleep 2
		# Create cluster admin role binging in default namespace
		echo "Creating cluster admin role binding..."
		if (( $(isClusterRoleBindingExist) )); then
			echo "Cluster role binding exist."
		else
			kubectl create clusterrolebinding dashboard-admin \
				-n default \
				--clusterrole=cluster-admin \
				--serviceaccount=default:${SVC_ACCOUNT}
			(( $? )) && abort "Failed to assigne cluster role to service account [${SVC_ACCOUNT}]"
		fi
		sleep 2
	fi
	# Generate dashboard login "kubeconfig" file
	echo "Generating dashboard login kubeconfig file: ${KUBECONFIG_FILE} ..."
	SVC_ACCOUNT_SECRET_NAME=$(kubectl get serviceaccount ${SVC_ACCOUNT} -n default -o jsonpath='{.secrets[0].name}')
	(( $? )) && abort "Failed to get service account secret key name"
	CA=$(kubectl get secret ${SVC_ACCOUNT_SECRET_NAME} -n default -o jsonpath='{.data.ca\.crt}')
	(( $? )) && abort "Failed to get service account certificate authority"
	TOKEN=$(kubectl get secret ${SVC_ACCOUNT_SECRET_NAME} -n default -o jsonpath='{.data.token}' | base64 --decode)
	(( $? )) && abort "Failed to get service account secret token"

	cat <<-EOF > ${KUBECONFIG_FILE}
		apiVersion: v1
		kind: Config
		clusters:
		  - name: ${CLUSTER_NAME}
		    cluster:
		      certificate-authority-data: ${CA}
		contexts:
		  - name: ${CTX_NAME}
		    context:
		      cluster: ${CLUSTER_NAME}
		      namespace: default
		      user: ${SVC_ACCOUNT}
		current-context: ${CTX_NAME}
		users:
		  - name: ${SVC_ACCOUNT}
		    user:
		      token: ${TOKEN}
		EOF

	(( $? )) && abort "Failed to create kubeconfig file: ${KUBECONFIG_FILE}"
	echo "Setting up remote access to dashboard..."
	while : ; do
		sleep 1
		(( $(isDashboardAppRunning) )) && break
	done
	killExistingExposedPort "${DASHBOARD_FILE}"
	nohup kubectl port-forward \
		--address=localhost,$(getHostIP) \
		-n kubernetes-dashboard \
		service/kubernetes-dashboard \
		$DASHBOARD_PORT:443 > ${DASHBOARD_FILE} 2>&1  &
	(( $? )) && abort "Failed to setup remote access to dashboard"
	echo "Succesfully setup kubernetes dashboard"
	echo "Dashboard URL: https://[$HOST_IP | localhost]:$DASHBOARD_PORT"
	echo "Dashboard login token: $TOKEN"
	echo ""
}

removeDashboard() { 
	source config/dashboard.conf 
	echo "Removing dashboard..."
	kubectl delete -f ${DASHBOARD_SETUP_YAML_URL}
	(( $? )) && abort  "Failed to remove dashboard"
	echo "Successfully removed dashboard"
}

#::END:: 

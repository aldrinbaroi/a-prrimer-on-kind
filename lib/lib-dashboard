#!/bin/bash
#
# Setup dashboard & generate dashboard login "kubeconfig" file
# 

setupDashboard() {
	source utils.sh
	source config/dashboard.conf

	local svcAccount=""
	local clusterName=""

	echo ""
	while getopts "s:n:p:h" opt ${@}; do
		case ${opt} in
			s) svcAccount=${OPTARG} ;; 
			n) clusterName=${OPTARG} ;; 
			p) dashboarchPort=${OPTARG} ;; 
			h)
				echo "Usage: "
				echo "        setupDashboard [-s service-account-name] [-n cluster-name]"
				echo ""
				echo "        If no options are provided then dashboard is setup in default [kind] cluster"
				echo "        with service account [dashboard-admin]"
				echo ""
				exit 0
				;; 
		esac
	done

	readonly SVC_ACCOUNT=${svcAccount:-dashboard-admin}
	readonly CLUSTER_NAME=${clusterName:-kind}
	readonly CTX_NAME="kind-${clusterName:-kind}"
	readonly KUBECONFIG_FILE="${KUBECONFIG_DIR}/${CTX_NAME}.kubeconfig" 

	# Set up dashboard
	echo ""
	echo "Setting up dashboard..."

	echo ""
	echo "  Cluster name             : ${CLUSTER_NAME}"
	echo "  Cluster context          : ${CTX_NAME}"
	echo "  Dashboard service account: ${SVC_ACCOUNT}"
	echo "  Kube config file         : ${KUBECONFIG_FILE}" 
	echo "" 
	if ( ! $(createDirectory ${KUBECONFIG_DIR}) ); then
		abort "Failed to create kubeconfig directory [${KUBECONFIG_DIR}] to store kubeconfig files"
	fi 
	if ( ! $(isClusterExist ${CLUSTER_NAME}) ); then
		abort "Cannot setup dashboard. [${CLUSTER_NAME}] cluster is not setup."
	fi
	kubectl config use-context ${CTX_NAME} 
	kubectl apply -f ${DASHBOARD_SETUP_YAML_URL} 
	(( $? )) && abort  "Failed to setup dashboard"
	sleep 3

	# Create service account in default namespace with cluster admin role (for ease of use)
	echo "Creating service account [${SVC_ACCOUNT}] in default namespacewith cluster admin role..."
	kubectl create serviceaccount ${SVC_ACCOUNT} -n default 
	(( $? )) && abort "Failed to create service account"
	sleep 2
	kubectl create clusterrolebinding dashboard-admin \
		-n default \
		--clusterrole=cluster-admin \
		--serviceaccount=default:${SVC_ACCOUNT} 
	(( $? )) && abort "Failed to assigne cluster role to service account [${SVC_ACCOUNT}]"
	sleep 2

	# Generate dashboard login "kubeconfig" file
	echo "Generating dashboard login kubeconfig file: ${KUBECONFIG_FILE} ..."
	SVC_ACCOUNT_SECRET_NAME=$(kubectl get serviceaccount ${SVC_ACCOUNT} -n default -o jsonpath='{.secrets[0].name}')
	(( $? )) && abort "Failed to get service account secret key name"
	CA=$(kubectl get secret ${SVC_ACCOUNT_SECRET_NAME} -n default -o jsonpath='{.data.ca\.crt}')
	(( $? )) && abort "Failed to get service account certificate authority"
	TOKEN=$(kubectl get secret ${SVC_ACCOUNT_SECRET_NAME} -n default -o jsonpath='{.data.token}' | base64 --decode)
	(( $? )) && abort "Failed to get service account secret token"

	cat <<-EOF > ${KUBECONFIG_FILE}
		apiVersion: v1
		kind: Config
		clusters:
		  - name: ${CLUSTER_NAME}
		    cluster:
		      certificate-authority-data: ${CA}
		contexts:
		  - name: ${CTX_NAME}
		    context:
		      cluster: ${CLUSTER_NAME}
		      namespace: default
		      user: ${SVC_ACCOUNT}
		current-context: ${CTX_NAME}
		users:
		  - name: ${SVC_ACCOUNT}
		    user:
		      token: ${TOKEN}
		EOF

	(( $? )) && abort "Failed to create kubeconfig file: ${KUBECONFIG_FILE}"
	echo "Setting up remote access to dashboard..."
	if [[ -z $dashboardPort ]] || (( $dashboardPort == 0)) ; then
		
	fi
	kubectl port-forward --address=localhost,$(getHostIP) -n kubernetes-dashboard service/kubernetes-dashboard $DASHBOARD_PORT:443
	(( $? )) && abort "Failed to setup remote access to dashbaord"
	echo "Succesfully setup kubernetes dashbaord & created kubeconfig file: ${KUBECONFIG_FILE}"
	echo ""
}

#::END:: 

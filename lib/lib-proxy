#!/bin/bash
#
# Start proxy
# 

startProxy() {
	source config/proxy.conf

	readonly TRUE=1
	readonly FALSE=0
	clusterName=""
	proxyPort=0
	openDashboardInBrowser=${FALSE}

	echo ""
	while getopts "n:p:oh" opt ${@}; do
		case ${opt} in
			n) clusterName=${OPTARG} ;;
			p) proxyPort=${OPTARG} ;;
			o) openDashboardInBrowser=${TRUE} ;;
			h)
				echo "Usage: "
				echo "    start-proxy [-n cluster-name] [-p proxy-port]"
				echo ""
				echo "    The default values are:"
				echo "         cluster-name  : kind"
				echo "         proxy-port    : RANDOM PORT"
				echo ""
				exit 0
				;;
		esac
	done

	readonly CLUSTER_NAME="${clusterName:-kind}"
	readonly CTX_NAME="kind-${clusterName:-kind}"
	readonly PROXY_PORT_FILE="${DATA_DIR}/${CTX_NAME}"
	readonly PROXY_STATUS_FILE="${DATA_DIR}/${CTX_NAME}-status"

	echo "Starting proxy..."
	if ! ( isClusterExist ${CLUSTER_NAME} ); then 
        	abort "Cannot create proxy. [${CLUSTER_NAME}] cluster doesn't exists."
	fi 
	if [[ ! -d ${DATA_DIR} ]]; then
		mkdir -p ${DATA_DIR}
		(( $? )) && abort "Failed to create data directory [${DATA_DIR}] to store running proxy server's port number"
	fi 
	if [[ -f ${PROXY_PORT_FILE} ]]; then
		source ${PROXY_PORT_FILE}
		readonly PS_COUNT=$(netstat -antp 2> /dev/null | grep kubectl | grep ${PROXY_PORT} | wc -l)
		(( ${PS_COUNT} > 0 )) && abort "Proxy already running..."
	fi
	PROXY_PORT="${proxyPort:-0}"
	echo "Setting current context to [${CTX_NAME}]..."
	kubectl config use-context ${CTX_NAME}
	kubectl proxy --port=${PROXY_PORT} > ${PROXY_STATUS_FILE} 2>&1 &
	sleep 3
	(( $? )) && abort "Failed to start proxy"
	PROXY_PORT=$(cat ${PROXY_STATUS_FILE} | grep -i "starting to serve on" | sed 's/.*://')
	DASHBOARD_URL="http://localhost:${PROXY_PORT}/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy"
	echo "PROXY_PORT=${PROXY_PORT}" > ${PROXY_PORT_FILE} 
	echo "Proxy started on port ${PROXY_PORT}"
	echo "You can access the Kubernetes dashboard at the following URL:"
	echo "${DASHBOARD_URL}"
	echo "Opening dashboard in the browser..."
	xdg-open ${DASHBOARD_URL}
	(( $? )) && echo "Failed to start proxy"
	echo "Opened the dashboard in the browser"
}

#
# Stop proxy
#

getProcessCount() {
	local _checkData=${1}
	if [ -z ${_checkData} ]; then
		echo 0
	else
		echo $(echo ${_checkData} | wc -l)
	fi
}

stopProxy() {
	source config/proxy.conf

	echo ""
	while getopts "n:h" opt ${@}; do
		case ${opt} in
			n) clusterName=${OPTARG} ;;
			h)
				echo "Usage: "
				echo "        stop-proxy [-n cluster-name]"
				echo ""
				echo "        The default cluster name is [kind]"
				echo ""
				exit 0
				;;
		esac
	done

	readonly CLUSTER_NAME=${clusterName:-kind}
	readonly CTX_NAME="kind-${clusterName:-kind}"
	readonly PROXY_PORT_FILE=${DATA_DIR}/${CTX_NAME}

	echo "Stopping proxy for [${CLUSTER_NAME}] cluster..."
	if [[ ! -f ${PROXY_PORT_FILE} ]]; then
		abort "Unable to locate proxy data file [${PROXY_PORT_FILE}] for [${CLUSTER_NAME}] cluster"
	fi
	source ${PROXY_PORT_FILE} 
	readonly checkData=$(netstat -antp 2> /dev/null | grep kubectl | grep ${PROXY_PORT})
	if (( $(getProcessCount ${checkData}) == 0 )); then 
		abort "Proxy not running..."; 
	fi 
	readonly processId=$(echo $checkData | awk '{print $7}' | awk 'BEGIN { FS = "/" } ; {print $1}')
	kill -9 ${processId} > /dev/null 2>&1
	(( $? )) && abort "Failed to stop proxy"
	echo "Successfully stopped proxy"
	echo ""
}

#::END:: 
